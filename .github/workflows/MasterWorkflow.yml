name: CI Workflow

# Triggers
on:
  push:
    branches: [ master ] # On push/commit to master (whenever `origin/master` receives a new commit)
  pull_request:
    branches: [ master ] # On commits to a PR into master
  workflow_dispatch: # Manual trigger (run via Actions -> CI Workflow (lefthand side) -> Run workflow)

# Jobs to run. Each job is a seperate container and may/may not have dependency jobs (like finishing building before testing)
jobs:
  # Compile the project. This job sets up the repository and subsequently builds the project.
  compile:
    name: Compile Project
    runs-on: macOS-latest
    strategy:
        matrix:
            destination: ['platform=iOS Simulator,name=iPhone 12 Pro'] # If you want to build for more devices, change this field to include whatever devices you want
    steps:
      - name: Checkout
        uses: actions/checkout@master
        # Set up SSH to fetch private HalloApp repositories
      - name: Set up ssh-agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.CI_PRIVATE_KEY }} # TODO: set up HalloApp bot account and issue new `CI_PRIVATE_KEY` (currently just using Matt's account)
      - name: Add known SSH hosts
        run: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - name: Set git to use SSH
        run: git config --global url."git@github.com:".insteadOf "https://github.com/"
        
        # Load cached CocoaPods if the Podfile matches. Also creates end-of-script step to save the CocoaPods if the Podfile didn't match or wasn't cached
      - name: Cache Pods
        id: cache-pods
        uses: actions/cache@v2
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
        # Load cached Swift Packages (NOTE: IDK if this is actually doing anything, since in the output logs it appears we're still fetching the packages)
        # Also creates end-of-script step to save the Packages
      - name: Cache Swift Packages
        uses: actions/cache@v2
        with:
            path: .build
            key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
            restore-keys: |
              ${{ runner.os }}-spm-
        # If the pods couldn't be loaded, then run `pod install` to fetch and build the `CocoaPods`
      - name: Install CocoaPods
        if: steps.cache-pods.outputs.cache-hit != 'true'
        run: pod install
        # Build the project for all devices
      - name: Build Project
        run: xcodebuild clean build-for-testing -workspace "Halloapp.xcworkspace" -scheme "Halloapp" -destination "${{matrix.destination}}"
        # Cache the build directory with the commit SHA so that other jobs can run w/o re-building the app
      - name: Cache build
        uses: actions/cache@v2
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: "$GITHUB_SHA" # TODO: In order to support multiple devices, we need to include the device in the cache key as well (otherwise it'll overwrite the cache with whichever build finished last)
  
  # Runs all unit tests available
  test:
    name: Test Project
    runs-on: macOS-latest
    strategy:
        matrix:
            destination: ['platform=iOS Simulator,name=iPhone 12 Pro'] # If you want to test on more devices, change this field to include whatever devices you want (make sure to also build for those devices)
    needs: compile # Needs compile job so it can access the built files
        
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Get build cache
        uses: actions/cache@v2
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: "$GITHUB_SHA"
      - name: Run Unit Tests
        run: xcodebuild test-without-building -workspace "Halloapp.xcworkspace" -scheme "Halloapp" -destination "${{matrix.destination}}" -only-testing "HalloAppTests"
  
  # Export new localizations to POEditor
  localize:
    name: Export New Localizations
    runs-on: macOS-latest
    needs: compile
    
    steps:
      - name: Checkout
        uses: actions/checkout@master
        # Need to perform some setup steps again since the job can't export without trying to re-build
      - name: Set up ssh-agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.CI_PRIVATE_KEY }}
      - name: Add known SSH hosts
        run: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - name: Set git to use SSH
        run: git config --global url."git@github.com:".insteadOf "https://github.com/"
        # By loading cached build, we drastically speed up the runtime of `xcodebuild -exportLocalizations`
      - name: Get build cache
        uses: actions/cache@v2
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: "$GITHUB_SHA"
      - name: Build Localizations
        run: xcodebuild -exportLocalizations -localizationPath . -project HalloApp.xcodeproj
        # Upload the localized files using the POEditor API
      - name: Upload Localizations
        run: curl -X POST https://api.poeditor.com/v2/projects/upload -F api_token=${{secrets.POEDITOR_API_KEY}} -F id="420915" -F updating="terms_translations" -F language="en" -F overwrite="1" -F fuzzy_trigger="1" -F file=@"en.xcloc/Localized Contents/en.xliff" -F tags="{\"obsolete\":\"removed-strings\"}"
