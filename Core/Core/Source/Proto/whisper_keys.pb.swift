// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: whisper_keys.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct PBwhisper_keys {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uid: Int64 = 0

  public var action: PBwhisper_keys.Action = .normal

  public var identityKey: Data = SwiftProtobuf.Internal.emptyData

  public var signedKey: Data = SwiftProtobuf.Internal.emptyData

  public var otpKeyCount: Int32 = 0

  public var oneTimeKeys: [Data] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case normal // = 0
    case add // = 1
    case count // = 2
    case get // = 3
    case set // = 4
    case update // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .normal
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .normal
      case 1: self = .add
      case 2: self = .count
      case 3: self = .get
      case 4: self = .set
      case 5: self = .update
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .normal: return 0
      case .add: return 1
      case .count: return 2
      case .get: return 3
      case .set: return 4
      case .update: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension PBwhisper_keys.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PBwhisper_keys.Action] = [
    .normal,
    .add,
    .count,
    .get,
    .set,
    .update,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBwhisper_keys: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "whisper_keys"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "action"),
    3: .standard(proto: "identity_key"),
    4: .standard(proto: "signed_key"),
    5: .standard(proto: "otp_key_count"),
    6: .standard(proto: "one_time_keys"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.uid)
      case 2: try decoder.decodeSingularEnumField(value: &self.action)
      case 3: try decoder.decodeSingularBytesField(value: &self.identityKey)
      case 4: try decoder.decodeSingularBytesField(value: &self.signedKey)
      case 5: try decoder.decodeSingularInt32Field(value: &self.otpKeyCount)
      case 6: try decoder.decodeRepeatedBytesField(value: &self.oneTimeKeys)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 1)
    }
    if self.action != .normal {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if !self.identityKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.identityKey, fieldNumber: 3)
    }
    if !self.signedKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.signedKey, fieldNumber: 4)
    }
    if self.otpKeyCount != 0 {
      try visitor.visitSingularInt32Field(value: self.otpKeyCount, fieldNumber: 5)
    }
    if !self.oneTimeKeys.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.oneTimeKeys, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBwhisper_keys, rhs: PBwhisper_keys) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.action != rhs.action {return false}
    if lhs.identityKey != rhs.identityKey {return false}
    if lhs.signedKey != rhs.signedKey {return false}
    if lhs.otpKeyCount != rhs.otpKeyCount {return false}
    if lhs.oneTimeKeys != rhs.oneTimeKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBwhisper_keys.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "normal"),
    1: .same(proto: "add"),
    2: .same(proto: "count"),
    3: .same(proto: "get"),
    4: .same(proto: "set"),
    5: .same(proto: "update"),
  ]
}
