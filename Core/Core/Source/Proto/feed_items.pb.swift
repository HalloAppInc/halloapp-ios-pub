// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: feed_items.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct PBaudience {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: PBaudience.TypeEnum = .all

  public var uids: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case all // = 0
    case except // = 1
    case only // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .all
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .all
      case 1: self = .except
      case 2: self = .only
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .all: return 0
      case .except: return 1
      case .only: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension PBaudience.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PBaudience.TypeEnum] = [
    .all,
    .except,
    .only,
  ]
}

#endif  // swift(>=4.2)

public struct PBpost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var uid: Int64 = 0

  public var payload: Data = SwiftProtobuf.Internal.emptyData

  public var audience: PBaudience {
    get {return _audience ?? PBaudience()}
    set {_audience = newValue}
  }
  /// Returns true if `audience` has been explicitly set.
  public var hasAudience: Bool {return self._audience != nil}
  /// Clears the value of `audience`. Subsequent reads from it will return its default value.
  public mutating func clearAudience() {self._audience = nil}

  public var timestamp: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _audience: PBaudience? = nil
}

public struct PBcomment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String = String()

  public var postID: String = String()

  public var parentCommentID: String = String()

  public var publisherUid: Int64 = 0

  public var publisherName: String = String()

  public var payload: Data = SwiftProtobuf.Internal.emptyData

  public var timestamp: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBshare_stanza {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uid: Int64 = 0

  public var postIds: [String] = []

  public var result: String = String()

  public var reason: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBfeed_item {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var action: PBfeed_item.Action = .publish

  public var item: PBfeed_item.OneOf_Item? = nil

  public var post: PBpost {
    get {
      if case .post(let v)? = item {return v}
      return PBpost()
    }
    set {item = .post(newValue)}
  }

  public var comment: PBcomment {
    get {
      if case .comment(let v)? = item {return v}
      return PBcomment()
    }
    set {item = .comment(newValue)}
  }

  public var shareStanzas: [PBshare_stanza] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Item: Equatable {
    case post(PBpost)
    case comment(PBcomment)

  #if !swift(>=4.1)
    public static func ==(lhs: PBfeed_item.OneOf_Item, rhs: PBfeed_item.OneOf_Item) -> Bool {
      switch (lhs, rhs) {
      case (.post(let l), .post(let r)): return l == r
      case (.comment(let l), .comment(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case publish // = 0
    case retract // = 1
    case share // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .publish
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .publish
      case 1: self = .retract
      case 2: self = .share
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .publish: return 0
      case .retract: return 1
      case .share: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension PBfeed_item.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PBfeed_item.Action] = [
    .publish,
    .retract,
    .share,
  ]
}

#endif  // swift(>=4.2)

public struct PBfeed_items {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uid: Int64 = 0

  public var items: [PBfeed_item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBaudience: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "audience"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "uids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeRepeatedInt64Field(value: &self.uids)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .all {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.uids.isEmpty {
      try visitor.visitPackedInt64Field(value: self.uids, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBaudience, rhs: PBaudience) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.uids != rhs.uids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBaudience.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "all"),
    1: .same(proto: "except"),
    2: .same(proto: "only"),
  ]
}

extension PBpost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "post"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "uid"),
    3: .same(proto: "payload"),
    4: .same(proto: "audience"),
    5: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.uid)
      case 3: try decoder.decodeSingularBytesField(value: &self.payload)
      case 4: try decoder.decodeSingularMessageField(value: &self._audience)
      case 5: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    if let v = self._audience {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBpost, rhs: PBpost) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs._audience != rhs._audience {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBcomment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "comment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "post_id"),
    3: .standard(proto: "parent_comment_id"),
    4: .standard(proto: "publisher_uid"),
    5: .standard(proto: "publisher_name"),
    6: .same(proto: "payload"),
    7: .same(proto: "timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.postID)
      case 3: try decoder.decodeSingularStringField(value: &self.parentCommentID)
      case 4: try decoder.decodeSingularInt64Field(value: &self.publisherUid)
      case 5: try decoder.decodeSingularStringField(value: &self.publisherName)
      case 6: try decoder.decodeSingularBytesField(value: &self.payload)
      case 7: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 2)
    }
    if !self.parentCommentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentCommentID, fieldNumber: 3)
    }
    if self.publisherUid != 0 {
      try visitor.visitSingularInt64Field(value: self.publisherUid, fieldNumber: 4)
    }
    if !self.publisherName.isEmpty {
      try visitor.visitSingularStringField(value: self.publisherName, fieldNumber: 5)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 6)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBcomment, rhs: PBcomment) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.postID != rhs.postID {return false}
    if lhs.parentCommentID != rhs.parentCommentID {return false}
    if lhs.publisherUid != rhs.publisherUid {return false}
    if lhs.publisherName != rhs.publisherName {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBshare_stanza: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "share_stanza"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .standard(proto: "post_ids"),
    3: .same(proto: "result"),
    4: .same(proto: "reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.uid)
      case 2: try decoder.decodeRepeatedStringField(value: &self.postIds)
      case 3: try decoder.decodeSingularStringField(value: &self.result)
      case 4: try decoder.decodeSingularStringField(value: &self.reason)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 1)
    }
    if !self.postIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.postIds, fieldNumber: 2)
    }
    if !self.result.isEmpty {
      try visitor.visitSingularStringField(value: self.result, fieldNumber: 3)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBshare_stanza, rhs: PBshare_stanza) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.postIds != rhs.postIds {return false}
    if lhs.result != rhs.result {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBfeed_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "feed_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .same(proto: "post"),
    3: .same(proto: "comment"),
    4: .standard(proto: "share_stanzas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.action)
      case 2:
        var v: PBpost?
        if let current = self.item {
          try decoder.handleConflictingOneOf()
          if case .post(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.item = .post(v)}
      case 3:
        var v: PBcomment?
        if let current = self.item {
          try decoder.handleConflictingOneOf()
          if case .comment(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.item = .comment(v)}
      case 4: try decoder.decodeRepeatedMessageField(value: &self.shareStanzas)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .publish {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    switch self.item {
    case .post(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .comment(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    if !self.shareStanzas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shareStanzas, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBfeed_item, rhs: PBfeed_item) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.item != rhs.item {return false}
    if lhs.shareStanzas != rhs.shareStanzas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBfeed_item.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "publish"),
    1: .same(proto: "retract"),
    2: .same(proto: "share"),
  ]
}

extension PBfeed_items: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "feed_items"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.uid)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.items)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 1)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBfeed_items, rhs: PBfeed_items) -> Bool {
    if lhs.uid != rhs.uid {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
