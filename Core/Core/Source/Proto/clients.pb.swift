// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: clients.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Clients_MediaType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case image // = 1
  case video // = 2
  case audio // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .image
    case 2: self = .video
    case 3: self = .audio
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .image: return 1
    case .video: return 2
    case .audio: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Clients_MediaType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Clients_MediaType] = [
    .unspecified,
    .image,
    .video,
    .audio,
  ]
}

#endif  // swift(>=4.2)

public enum Clients_BlobVersion: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case `default` // = 0
  case chunked // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .default
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .default
    case 1: self = .chunked
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .default: return 0
    case .chunked: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Clients_BlobVersion: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Clients_BlobVersion] = [
    .default,
    .chunked,
  ]
}

#endif  // swift(>=4.2)

public enum Clients_PhoneType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unspecified // = 0
  case mobile // = 1
  case home // = 2
  case work // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .mobile
    case 2: self = .home
    case 3: self = .work
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .mobile: return 1
    case .home: return 2
    case .work: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Clients_PhoneType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Clients_PhoneType] = [
    .unspecified,
    .mobile,
    .home,
    .work,
  ]
}

#endif  // swift(>=4.2)

public struct Clients_Media {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Clients_MediaType = .unspecified

  public var width: Int32 = 0

  public var height: Int32 = 0

  public var encryptionKey: Data = Data()

  public var ciphertextHash: Data = Data()

  public var downloadURL: String = String()

  public var blobVersion: Clients_BlobVersion = .default

  public var chunkSize: Int32 = 0

  public var blobSize: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_EncryptedResource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var encryptionKey: Data = Data()

  public var ciphertextHash: Data = Data()

  public var downloadURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_Mention {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var index: Int32 = 0

  public var userID: String = String()

  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_Phone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Clients_PhoneType = .unspecified

  public var number: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_Contact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var phones: [Clients_Phone] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_Post {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var media: [Clients_Media] = []

  public var text: String = String()

  public var mentions: [Clients_Mention] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_Comment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var feedPostID: String = String()

  public var parentCommentID: String = String()

  public var text: String = String()

  public var mentions: [Clients_Mention] = []

  public var media: Clients_Media {
    get {return _media ?? Clients_Media()}
    set {_media = newValue}
  }
  /// Returns true if `media` has been explicitly set.
  public var hasMedia: Bool {return self._media != nil}
  /// Clears the value of `media`. Subsequent reads from it will return its default value.
  public mutating func clearMedia() {self._media = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _media: Clients_Media? = nil
}

public struct Clients_ChatMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var media: [Clients_Media] = []

  public var text: String = String()

  public var feedPostID: String = String()

  public var feedPostMediaIndex: Int32 = 0

  public var mentions: [Clients_Mention] = []

  public var chatReplyMessageID: String = String()

  public var chatReplyMessageMediaIndex: Int32 = 0

  public var chatReplyMessageSenderID: String = String()

  public var contacts: [Clients_Contact] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_SignedPreKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var publicKey: Data = Data()

  public var signature: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_OneTimePreKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var publicKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_Background {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var theme: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_ChatContainer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var context: Clients_ChatContext {
    get {return _context ?? Clients_ChatContext()}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  public var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  public mutating func clearContext() {self._context = nil}

  public var message: Clients_ChatContainer.OneOf_Message? = nil

  public var text: Clients_Text {
    get {
      if case .text(let v)? = message {return v}
      return Clients_Text()
    }
    set {message = .text(newValue)}
  }

  public var album: Clients_Album {
    get {
      if case .album(let v)? = message {return v}
      return Clients_Album()
    }
    set {message = .album(newValue)}
  }

  public var contactCard: Clients_ContactCard {
    get {
      if case .contactCard(let v)? = message {return v}
      return Clients_ContactCard()
    }
    set {message = .contactCard(newValue)}
  }

  public var voiceNote: Clients_VoiceNote {
    get {
      if case .voiceNote(let v)? = message {return v}
      return Clients_VoiceNote()
    }
    set {message = .voiceNote(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Message: Equatable {
    case text(Clients_Text)
    case album(Clients_Album)
    case contactCard(Clients_ContactCard)
    case voiceNote(Clients_VoiceNote)

  #if !swift(>=4.1)
    public static func ==(lhs: Clients_ChatContainer.OneOf_Message, rhs: Clients_ChatContainer.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.text, .text): return {
        guard case .text(let l) = lhs, case .text(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.album, .album): return {
        guard case .album(let l) = lhs, case .album(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contactCard, .contactCard): return {
        guard case .contactCard(let l) = lhs, case .contactCard(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.voiceNote, .voiceNote): return {
        guard case .voiceNote(let l) = lhs, case .voiceNote(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _context: Clients_ChatContext? = nil
}

public struct Clients_ChatContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var feedPostID: String = String()

  public var feedPostMediaIndex: Int32 = 0

  public var chatReplyMessageID: String = String()

  public var chatReplyMessageMediaIndex: Int32 = 0

  public var chatReplyMessageSenderID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_PostContainer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var post: Clients_PostContainer.OneOf_Post? = nil

  public var text: Clients_Text {
    get {
      if case .text(let v)? = post {return v}
      return Clients_Text()
    }
    set {post = .text(newValue)}
  }

  public var album: Clients_Album {
    get {
      if case .album(let v)? = post {return v}
      return Clients_Album()
    }
    set {post = .album(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Post: Equatable {
    case text(Clients_Text)
    case album(Clients_Album)

  #if !swift(>=4.1)
    public static func ==(lhs: Clients_PostContainer.OneOf_Post, rhs: Clients_PostContainer.OneOf_Post) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.text, .text): return {
        guard case .text(let l) = lhs, case .text(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.album, .album): return {
        guard case .album(let l) = lhs, case .album(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Clients_CommentContainer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var context: Clients_CommentContext {
    get {return _context ?? Clients_CommentContext()}
    set {_context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  public var hasContext: Bool {return self._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  public mutating func clearContext() {self._context = nil}

  public var comment: Clients_CommentContainer.OneOf_Comment? = nil

  public var text: Clients_Text {
    get {
      if case .text(let v)? = comment {return v}
      return Clients_Text()
    }
    set {comment = .text(newValue)}
  }

  public var album: Clients_Album {
    get {
      if case .album(let v)? = comment {return v}
      return Clients_Album()
    }
    set {comment = .album(newValue)}
  }

  public var voiceNote: Clients_VoiceNote {
    get {
      if case .voiceNote(let v)? = comment {return v}
      return Clients_VoiceNote()
    }
    set {comment = .voiceNote(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Comment: Equatable {
    case text(Clients_Text)
    case album(Clients_Album)
    case voiceNote(Clients_VoiceNote)

  #if !swift(>=4.1)
    public static func ==(lhs: Clients_CommentContainer.OneOf_Comment, rhs: Clients_CommentContainer.OneOf_Comment) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.text, .text): return {
        guard case .text(let l) = lhs, case .text(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.album, .album): return {
        guard case .album(let l) = lhs, case .album(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.voiceNote, .voiceNote): return {
        guard case .voiceNote(let l) = lhs, case .voiceNote(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _context: Clients_CommentContext? = nil
}

public struct Clients_CommentContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var feedPostID: String = String()

  public var parentCommentID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_Container {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var post: Clients_Post {
    get {return _storage._post ?? Clients_Post()}
    set {_uniqueStorage()._post = newValue}
  }
  /// Returns true if `post` has been explicitly set.
  public var hasPost: Bool {return _storage._post != nil}
  /// Clears the value of `post`. Subsequent reads from it will return its default value.
  public mutating func clearPost() {_uniqueStorage()._post = nil}

  public var comment: Clients_Comment {
    get {return _storage._comment ?? Clients_Comment()}
    set {_uniqueStorage()._comment = newValue}
  }
  /// Returns true if `comment` has been explicitly set.
  public var hasComment: Bool {return _storage._comment != nil}
  /// Clears the value of `comment`. Subsequent reads from it will return its default value.
  public mutating func clearComment() {_uniqueStorage()._comment = nil}

  public var chatMessage: Clients_ChatMessage {
    get {return _storage._chatMessage ?? Clients_ChatMessage()}
    set {_uniqueStorage()._chatMessage = newValue}
  }
  /// Returns true if `chatMessage` has been explicitly set.
  public var hasChatMessage: Bool {return _storage._chatMessage != nil}
  /// Clears the value of `chatMessage`. Subsequent reads from it will return its default value.
  public mutating func clearChatMessage() {_uniqueStorage()._chatMessage = nil}

  public var postContainer: Clients_PostContainer {
    get {return _storage._postContainer ?? Clients_PostContainer()}
    set {_uniqueStorage()._postContainer = newValue}
  }
  /// Returns true if `postContainer` has been explicitly set.
  public var hasPostContainer: Bool {return _storage._postContainer != nil}
  /// Clears the value of `postContainer`. Subsequent reads from it will return its default value.
  public mutating func clearPostContainer() {_uniqueStorage()._postContainer = nil}

  public var commentContainer: Clients_CommentContainer {
    get {return _storage._commentContainer ?? Clients_CommentContainer()}
    set {_uniqueStorage()._commentContainer = newValue}
  }
  /// Returns true if `commentContainer` has been explicitly set.
  public var hasCommentContainer: Bool {return _storage._commentContainer != nil}
  /// Clears the value of `commentContainer`. Subsequent reads from it will return its default value.
  public mutating func clearCommentContainer() {_uniqueStorage()._commentContainer = nil}

  public var chatContainer: Clients_ChatContainer {
    get {return _storage._chatContainer ?? Clients_ChatContainer()}
    set {_uniqueStorage()._chatContainer = newValue}
  }
  /// Returns true if `chatContainer` has been explicitly set.
  public var hasChatContainer: Bool {return _storage._chatContainer != nil}
  /// Clears the value of `chatContainer`. Subsequent reads from it will return its default value.
  public mutating func clearChatContainer() {_uniqueStorage()._chatContainer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Clients_Text {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var text: String = String()

  public var mentions: [Clients_Mention] = []

  public var link: Clients_Link {
    get {return _link ?? Clients_Link()}
    set {_link = newValue}
  }
  /// Returns true if `link` has been explicitly set.
  public var hasLink: Bool {return self._link != nil}
  /// Clears the value of `link`. Subsequent reads from it will return its default value.
  public mutating func clearLink() {self._link = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _link: Clients_Link? = nil
}

public struct Clients_ContactCard {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var contacts: [Clients_Contact] = []

  public var text: Clients_Text {
    get {return _text ?? Clients_Text()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  public var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  public mutating func clearText() {self._text = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _text: Clients_Text? = nil
}

public struct Clients_Image {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var img: Clients_EncryptedResource {
    get {return _img ?? Clients_EncryptedResource()}
    set {_img = newValue}
  }
  /// Returns true if `img` has been explicitly set.
  public var hasImg: Bool {return self._img != nil}
  /// Clears the value of `img`. Subsequent reads from it will return its default value.
  public mutating func clearImg() {self._img = nil}

  public var width: Int32 = 0

  public var height: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _img: Clients_EncryptedResource? = nil
}

public struct Clients_StreamingInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blobVersion: Clients_BlobVersion = .default

  public var chunkSize: Int32 = 0

  public var blobSize: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_Video {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var video: Clients_EncryptedResource {
    get {return _video ?? Clients_EncryptedResource()}
    set {_video = newValue}
  }
  /// Returns true if `video` has been explicitly set.
  public var hasVideo: Bool {return self._video != nil}
  /// Clears the value of `video`. Subsequent reads from it will return its default value.
  public mutating func clearVideo() {self._video = nil}

  public var width: Int32 = 0

  public var height: Int32 = 0

  public var streamingInfo: Clients_StreamingInfo {
    get {return _streamingInfo ?? Clients_StreamingInfo()}
    set {_streamingInfo = newValue}
  }
  /// Returns true if `streamingInfo` has been explicitly set.
  public var hasStreamingInfo: Bool {return self._streamingInfo != nil}
  /// Clears the value of `streamingInfo`. Subsequent reads from it will return its default value.
  public mutating func clearStreamingInfo() {self._streamingInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _video: Clients_EncryptedResource? = nil
  fileprivate var _streamingInfo: Clients_StreamingInfo? = nil
}

public struct Clients_AlbumMedia {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var media: Clients_AlbumMedia.OneOf_Media? = nil

  public var image: Clients_Image {
    get {
      if case .image(let v)? = media {return v}
      return Clients_Image()
    }
    set {media = .image(newValue)}
  }

  public var video: Clients_Video {
    get {
      if case .video(let v)? = media {return v}
      return Clients_Video()
    }
    set {media = .video(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Media: Equatable {
    case image(Clients_Image)
    case video(Clients_Video)

  #if !swift(>=4.1)
    public static func ==(lhs: Clients_AlbumMedia.OneOf_Media, rhs: Clients_AlbumMedia.OneOf_Media) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.image, .image): return {
        guard case .image(let l) = lhs, case .image(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.video, .video): return {
        guard case .video(let l) = lhs, case .video(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Clients_Album {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var media: [Clients_AlbumMedia] = []

  public var text: Clients_Text {
    get {return _text ?? Clients_Text()}
    set {_text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  public var hasText: Bool {return self._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  public mutating func clearText() {self._text = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _text: Clients_Text? = nil
}

public struct Clients_SenderKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chainKey: Data = Data()

  public var publicSignatureKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Clients_SenderState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var senderKey: Clients_SenderKey {
    get {return _senderKey ?? Clients_SenderKey()}
    set {_senderKey = newValue}
  }
  /// Returns true if `senderKey` has been explicitly set.
  public var hasSenderKey: Bool {return self._senderKey != nil}
  /// Clears the value of `senderKey`. Subsequent reads from it will return its default value.
  public mutating func clearSenderKey() {self._senderKey = nil}

  public var currentChainIndex: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _senderKey: Clients_SenderKey? = nil
}

public struct Clients_EncryptedPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var payload: Clients_EncryptedPayload.OneOf_Payload? = nil

  public var senderStateEncryptedPayload: Data {
    get {
      if case .senderStateEncryptedPayload(let v)? = payload {return v}
      return Data()
    }
    set {payload = .senderStateEncryptedPayload(newValue)}
  }

  public var oneToOneEncryptedPayload: Data {
    get {
      if case .oneToOneEncryptedPayload(let v)? = payload {return v}
      return Data()
    }
    set {payload = .oneToOneEncryptedPayload(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Payload: Equatable {
    case senderStateEncryptedPayload(Data)
    case oneToOneEncryptedPayload(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Clients_EncryptedPayload.OneOf_Payload, rhs: Clients_EncryptedPayload.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.senderStateEncryptedPayload, .senderStateEncryptedPayload): return {
        guard case .senderStateEncryptedPayload(let l) = lhs, case .senderStateEncryptedPayload(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.oneToOneEncryptedPayload, .oneToOneEncryptedPayload): return {
        guard case .oneToOneEncryptedPayload(let l) = lhs, case .oneToOneEncryptedPayload(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Clients_VoiceNote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var audio: Clients_EncryptedResource {
    get {return _audio ?? Clients_EncryptedResource()}
    set {_audio = newValue}
  }
  /// Returns true if `audio` has been explicitly set.
  public var hasAudio: Bool {return self._audio != nil}
  /// Clears the value of `audio`. Subsequent reads from it will return its default value.
  public mutating func clearAudio() {self._audio = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _audio: Clients_EncryptedResource? = nil
}

public struct Clients_Link {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String = String()

  public var title: String = String()

  public var description_p: String = String()

  public var preview: [Clients_Image] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "clients"

extension Clients_MediaType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MEDIA_TYPE_UNSPECIFIED"),
    1: .same(proto: "MEDIA_TYPE_IMAGE"),
    2: .same(proto: "MEDIA_TYPE_VIDEO"),
    3: .same(proto: "MEDIA_TYPE_AUDIO"),
  ]
}

extension Clients_BlobVersion: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BLOB_VERSION_DEFAULT"),
    1: .same(proto: "BLOB_VERSION_CHUNKED"),
  ]
}

extension Clients_PhoneType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PHONE_TYPE_UNSPECIFIED"),
    1: .same(proto: "PHONE_TYPE_MOBILE"),
    2: .same(proto: "PHONE_TYPE_HOME"),
    3: .same(proto: "PHONE_TYPE_WORK"),
  ]
}

extension Clients_Media: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Media"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "width"),
    3: .same(proto: "height"),
    4: .standard(proto: "encryption_key"),
    5: .standard(proto: "ciphertext_hash"),
    6: .standard(proto: "download_url"),
    7: .standard(proto: "blob_version"),
    8: .standard(proto: "chunk_size"),
    9: .standard(proto: "blob_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.encryptionKey) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.ciphertextHash) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.downloadURL) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.blobVersion) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.chunkSize) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.blobSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 3)
    }
    if !self.encryptionKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.encryptionKey, fieldNumber: 4)
    }
    if !self.ciphertextHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.ciphertextHash, fieldNumber: 5)
    }
    if !self.downloadURL.isEmpty {
      try visitor.visitSingularStringField(value: self.downloadURL, fieldNumber: 6)
    }
    if self.blobVersion != .default {
      try visitor.visitSingularEnumField(value: self.blobVersion, fieldNumber: 7)
    }
    if self.chunkSize != 0 {
      try visitor.visitSingularInt32Field(value: self.chunkSize, fieldNumber: 8)
    }
    if self.blobSize != 0 {
      try visitor.visitSingularInt64Field(value: self.blobSize, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Media, rhs: Clients_Media) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.encryptionKey != rhs.encryptionKey {return false}
    if lhs.ciphertextHash != rhs.ciphertextHash {return false}
    if lhs.downloadURL != rhs.downloadURL {return false}
    if lhs.blobVersion != rhs.blobVersion {return false}
    if lhs.chunkSize != rhs.chunkSize {return false}
    if lhs.blobSize != rhs.blobSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_EncryptedResource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncryptedResource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "encryption_key"),
    2: .standard(proto: "ciphertext_hash"),
    3: .standard(proto: "download_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.encryptionKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.ciphertextHash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.downloadURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encryptionKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.encryptionKey, fieldNumber: 1)
    }
    if !self.ciphertextHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.ciphertextHash, fieldNumber: 2)
    }
    if !self.downloadURL.isEmpty {
      try visitor.visitSingularStringField(value: self.downloadURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_EncryptedResource, rhs: Clients_EncryptedResource) -> Bool {
    if lhs.encryptionKey != rhs.encryptionKey {return false}
    if lhs.ciphertextHash != rhs.ciphertextHash {return false}
    if lhs.downloadURL != rhs.downloadURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Mention: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Mention"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .standard(proto: "user_id"),
    3: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularInt32Field(value: self.index, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Mention, rhs: Clients_Mention) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Phone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Phone"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "number"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.number) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.number.isEmpty {
      try visitor.visitSingularStringField(value: self.number, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Phone, rhs: Clients_Phone) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.number != rhs.number {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Contact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Contact"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "phones"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.phones) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.phones.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.phones, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Contact, rhs: Clients_Contact) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.phones != rhs.phones {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Post: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Post"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "media"),
    2: .same(proto: "text"),
    3: .same(proto: "mentions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.media) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.mentions) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.media.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.media, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if !self.mentions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mentions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Post, rhs: Clients_Post) -> Bool {
    if lhs.media != rhs.media {return false}
    if lhs.text != rhs.text {return false}
    if lhs.mentions != rhs.mentions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Comment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Comment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_post_id"),
    3: .standard(proto: "parent_comment_id"),
    4: .same(proto: "text"),
    5: .same(proto: "mentions"),
    6: .same(proto: "media"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedPostID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.parentCommentID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.mentions) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._media) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedPostID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedPostID, fieldNumber: 1)
    }
    if !self.parentCommentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentCommentID, fieldNumber: 3)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    if !self.mentions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mentions, fieldNumber: 5)
    }
    if let v = self._media {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Comment, rhs: Clients_Comment) -> Bool {
    if lhs.feedPostID != rhs.feedPostID {return false}
    if lhs.parentCommentID != rhs.parentCommentID {return false}
    if lhs.text != rhs.text {return false}
    if lhs.mentions != rhs.mentions {return false}
    if lhs._media != rhs._media {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_ChatMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "media"),
    2: .same(proto: "text"),
    3: .standard(proto: "feed_post_id"),
    4: .standard(proto: "feed_post_media_index"),
    5: .same(proto: "mentions"),
    6: .standard(proto: "chat_reply_message_id"),
    7: .standard(proto: "chat_reply_message_media_index"),
    8: .standard(proto: "chat_reply_message_sender_id"),
    9: .same(proto: "contacts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.media) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.feedPostID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.feedPostMediaIndex) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.mentions) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.chatReplyMessageID) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.chatReplyMessageMediaIndex) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.chatReplyMessageSenderID) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.contacts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.media.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.media, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    if !self.feedPostID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedPostID, fieldNumber: 3)
    }
    if self.feedPostMediaIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.feedPostMediaIndex, fieldNumber: 4)
    }
    if !self.mentions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mentions, fieldNumber: 5)
    }
    if !self.chatReplyMessageID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatReplyMessageID, fieldNumber: 6)
    }
    if self.chatReplyMessageMediaIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.chatReplyMessageMediaIndex, fieldNumber: 7)
    }
    if !self.chatReplyMessageSenderID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatReplyMessageSenderID, fieldNumber: 8)
    }
    if !self.contacts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contacts, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_ChatMessage, rhs: Clients_ChatMessage) -> Bool {
    if lhs.media != rhs.media {return false}
    if lhs.text != rhs.text {return false}
    if lhs.feedPostID != rhs.feedPostID {return false}
    if lhs.feedPostMediaIndex != rhs.feedPostMediaIndex {return false}
    if lhs.mentions != rhs.mentions {return false}
    if lhs.chatReplyMessageID != rhs.chatReplyMessageID {return false}
    if lhs.chatReplyMessageMediaIndex != rhs.chatReplyMessageMediaIndex {return false}
    if lhs.chatReplyMessageSenderID != rhs.chatReplyMessageSenderID {return false}
    if lhs.contacts != rhs.contacts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_SignedPreKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignedPreKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "public_key"),
    3: .same(proto: "signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 2)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_SignedPreKey, rhs: Clients_SignedPreKey) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_OneTimePreKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OneTimePreKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_OneTimePreKey, rhs: Clients_OneTimePreKey) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Background: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Background"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "theme"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.theme) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.theme != 0 {
      try visitor.visitSingularInt32Field(value: self.theme, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Background, rhs: Clients_Background) -> Bool {
    if lhs.theme != rhs.theme {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_ChatContainer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatContainer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "context"),
    2: .same(proto: "text"),
    3: .same(proto: "album"),
    4: .standard(proto: "contact_card"),
    5: .standard(proto: "voice_note"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._context) }()
      case 2: try {
        var v: Clients_Text?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .text(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .text(v)
        }
      }()
      case 3: try {
        var v: Clients_Album?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .album(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .album(v)
        }
      }()
      case 4: try {
        var v: Clients_ContactCard?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .contactCard(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .contactCard(v)
        }
      }()
      case 5: try {
        var v: Clients_VoiceNote?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .voiceNote(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .voiceNote(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._context {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.message {
    case .text?: try {
      guard case .text(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .album?: try {
      guard case .album(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .contactCard?: try {
      guard case .contactCard(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .voiceNote?: try {
      guard case .voiceNote(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_ChatContainer, rhs: Clients_ChatContainer) -> Bool {
    if lhs._context != rhs._context {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_ChatContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChatContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_post_id"),
    2: .standard(proto: "feed_post_media_index"),
    3: .standard(proto: "chat_reply_message_id"),
    4: .standard(proto: "chat_reply_message_media_index"),
    5: .standard(proto: "chat_reply_message_sender_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedPostID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.feedPostMediaIndex) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.chatReplyMessageID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.chatReplyMessageMediaIndex) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.chatReplyMessageSenderID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedPostID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedPostID, fieldNumber: 1)
    }
    if self.feedPostMediaIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.feedPostMediaIndex, fieldNumber: 2)
    }
    if !self.chatReplyMessageID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatReplyMessageID, fieldNumber: 3)
    }
    if self.chatReplyMessageMediaIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.chatReplyMessageMediaIndex, fieldNumber: 4)
    }
    if !self.chatReplyMessageSenderID.isEmpty {
      try visitor.visitSingularStringField(value: self.chatReplyMessageSenderID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_ChatContext, rhs: Clients_ChatContext) -> Bool {
    if lhs.feedPostID != rhs.feedPostID {return false}
    if lhs.feedPostMediaIndex != rhs.feedPostMediaIndex {return false}
    if lhs.chatReplyMessageID != rhs.chatReplyMessageID {return false}
    if lhs.chatReplyMessageMediaIndex != rhs.chatReplyMessageMediaIndex {return false}
    if lhs.chatReplyMessageSenderID != rhs.chatReplyMessageSenderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_PostContainer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PostContainer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "album"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Clients_Text?
        var hadOneofValue = false
        if let current = self.post {
          hadOneofValue = true
          if case .text(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.post = .text(v)
        }
      }()
      case 2: try {
        var v: Clients_Album?
        var hadOneofValue = false
        if let current = self.post {
          hadOneofValue = true
          if case .album(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.post = .album(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.post {
    case .text?: try {
      guard case .text(let v)? = self.post else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .album?: try {
      guard case .album(let v)? = self.post else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_PostContainer, rhs: Clients_PostContainer) -> Bool {
    if lhs.post != rhs.post {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_CommentContainer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentContainer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "context"),
    2: .same(proto: "text"),
    3: .same(proto: "album"),
    4: .standard(proto: "voice_note"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._context) }()
      case 2: try {
        var v: Clients_Text?
        var hadOneofValue = false
        if let current = self.comment {
          hadOneofValue = true
          if case .text(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.comment = .text(v)
        }
      }()
      case 3: try {
        var v: Clients_Album?
        var hadOneofValue = false
        if let current = self.comment {
          hadOneofValue = true
          if case .album(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.comment = .album(v)
        }
      }()
      case 4: try {
        var v: Clients_VoiceNote?
        var hadOneofValue = false
        if let current = self.comment {
          hadOneofValue = true
          if case .voiceNote(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.comment = .voiceNote(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._context {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.comment {
    case .text?: try {
      guard case .text(let v)? = self.comment else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .album?: try {
      guard case .album(let v)? = self.comment else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .voiceNote?: try {
      guard case .voiceNote(let v)? = self.comment else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_CommentContainer, rhs: Clients_CommentContainer) -> Bool {
    if lhs._context != rhs._context {return false}
    if lhs.comment != rhs.comment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_CommentContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_post_id"),
    2: .standard(proto: "parent_comment_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedPostID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.parentCommentID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedPostID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedPostID, fieldNumber: 1)
    }
    if !self.parentCommentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentCommentID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_CommentContext, rhs: Clients_CommentContext) -> Bool {
    if lhs.feedPostID != rhs.feedPostID {return false}
    if lhs.parentCommentID != rhs.parentCommentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Container: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Container"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "post"),
    2: .same(proto: "comment"),
    3: .standard(proto: "chat_message"),
    4: .standard(proto: "post_container"),
    5: .standard(proto: "comment_container"),
    6: .standard(proto: "chat_container"),
  ]

  fileprivate class _StorageClass {
    var _post: Clients_Post? = nil
    var _comment: Clients_Comment? = nil
    var _chatMessage: Clients_ChatMessage? = nil
    var _postContainer: Clients_PostContainer? = nil
    var _commentContainer: Clients_CommentContainer? = nil
    var _chatContainer: Clients_ChatContainer? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _post = source._post
      _comment = source._comment
      _chatMessage = source._chatMessage
      _postContainer = source._postContainer
      _commentContainer = source._commentContainer
      _chatContainer = source._chatContainer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._post) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._comment) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._chatMessage) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._postContainer) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._commentContainer) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._chatContainer) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._post {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._comment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._chatMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._postContainer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._commentContainer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._chatContainer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Container, rhs: Clients_Container) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._post != rhs_storage._post {return false}
        if _storage._comment != rhs_storage._comment {return false}
        if _storage._chatMessage != rhs_storage._chatMessage {return false}
        if _storage._postContainer != rhs_storage._postContainer {return false}
        if _storage._commentContainer != rhs_storage._commentContainer {return false}
        if _storage._chatContainer != rhs_storage._chatContainer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Text"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "mentions"),
    3: .same(proto: "link"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.mentions) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._link) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.mentions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mentions, fieldNumber: 2)
    }
    if let v = self._link {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Text, rhs: Clients_Text) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.mentions != rhs.mentions {return false}
    if lhs._link != rhs._link {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_ContactCard: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContactCard"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contacts"),
    2: .same(proto: "text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.contacts) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._text) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contacts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contacts, fieldNumber: 1)
    }
    if let v = self._text {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_ContactCard, rhs: Clients_ContactCard) -> Bool {
    if lhs.contacts != rhs.contacts {return false}
    if lhs._text != rhs._text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Image: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Image"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "img"),
    2: .same(proto: "width"),
    3: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._img) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._img {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Image, rhs: Clients_Image) -> Bool {
    if lhs._img != rhs._img {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_StreamingInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "blob_version"),
    2: .standard(proto: "chunk_size"),
    3: .standard(proto: "blob_size"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.blobVersion) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.chunkSize) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.blobSize) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blobVersion != .default {
      try visitor.visitSingularEnumField(value: self.blobVersion, fieldNumber: 1)
    }
    if self.chunkSize != 0 {
      try visitor.visitSingularInt32Field(value: self.chunkSize, fieldNumber: 2)
    }
    if self.blobSize != 0 {
      try visitor.visitSingularInt64Field(value: self.blobSize, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_StreamingInfo, rhs: Clients_StreamingInfo) -> Bool {
    if lhs.blobVersion != rhs.blobVersion {return false}
    if lhs.chunkSize != rhs.chunkSize {return false}
    if lhs.blobSize != rhs.blobSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Video: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Video"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "video"),
    2: .same(proto: "width"),
    3: .same(proto: "height"),
    4: .standard(proto: "streaming_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._video) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._streamingInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._video {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 3)
    }
    if let v = self._streamingInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Video, rhs: Clients_Video) -> Bool {
    if lhs._video != rhs._video {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs._streamingInfo != rhs._streamingInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_AlbumMedia: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AlbumMedia"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "image"),
    2: .same(proto: "video"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Clients_Image?
        var hadOneofValue = false
        if let current = self.media {
          hadOneofValue = true
          if case .image(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.media = .image(v)
        }
      }()
      case 2: try {
        var v: Clients_Video?
        var hadOneofValue = false
        if let current = self.media {
          hadOneofValue = true
          if case .video(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.media = .video(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.media {
    case .image?: try {
      guard case .image(let v)? = self.media else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .video?: try {
      guard case .video(let v)? = self.media else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_AlbumMedia, rhs: Clients_AlbumMedia) -> Bool {
    if lhs.media != rhs.media {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Album: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Album"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "media"),
    2: .same(proto: "text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.media) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._text) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.media.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.media, fieldNumber: 1)
    }
    if let v = self._text {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Album, rhs: Clients_Album) -> Bool {
    if lhs.media != rhs.media {return false}
    if lhs._text != rhs._text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_SenderKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SenderKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_key"),
    2: .standard(proto: "public_signature_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.chainKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.publicSignatureKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.chainKey, fieldNumber: 1)
    }
    if !self.publicSignatureKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicSignatureKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_SenderKey, rhs: Clients_SenderKey) -> Bool {
    if lhs.chainKey != rhs.chainKey {return false}
    if lhs.publicSignatureKey != rhs.publicSignatureKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_SenderState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SenderState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_key"),
    2: .standard(proto: "current_chain_index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._senderKey) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.currentChainIndex) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._senderKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.currentChainIndex != 0 {
      try visitor.visitSingularInt32Field(value: self.currentChainIndex, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_SenderState, rhs: Clients_SenderState) -> Bool {
    if lhs._senderKey != rhs._senderKey {return false}
    if lhs.currentChainIndex != rhs.currentChainIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_EncryptedPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncryptedPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_state_encrypted_payload"),
    2: .standard(proto: "one_to_one_encrypted_payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .senderStateEncryptedPayload(v)
        }
      }()
      case 2: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.payload != nil {try decoder.handleConflictingOneOf()}
          self.payload = .oneToOneEncryptedPayload(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.payload {
    case .senderStateEncryptedPayload?: try {
      guard case .senderStateEncryptedPayload(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }()
    case .oneToOneEncryptedPayload?: try {
      guard case .oneToOneEncryptedPayload(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_EncryptedPayload, rhs: Clients_EncryptedPayload) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_VoiceNote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VoiceNote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "audio"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._audio) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._audio {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_VoiceNote, rhs: Clients_VoiceNote) -> Bool {
    if lhs._audio != rhs._audio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Clients_Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Link"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "preview"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.preview) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.preview.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.preview, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Clients_Link, rhs: Clients_Link) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.preview != rhs.preview {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
