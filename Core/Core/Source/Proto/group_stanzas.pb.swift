// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: group_stanzas.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct PBgroup_member {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var action: PBgroup_member.Action = .add

  public var uid: Int64 = 0

  public var type: PBgroup_member.TypeEnum = .member

  public var name: String = String()

  public var avatarID: String = String()

  public var result: String = String()

  public var reason: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case add // = 0
    case remove // = 1
    case promote // = 2
    case demote // = 3
    case leave // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .add
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .add
      case 1: self = .remove
      case 2: self = .promote
      case 3: self = .demote
      case 4: self = .leave
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .add: return 0
      case .remove: return 1
      case .promote: return 2
      case .demote: return 3
      case .leave: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case member // = 0
    case admin // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .member
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .member
      case 1: self = .admin
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .member: return 0
      case .admin: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension PBgroup_member.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PBgroup_member.Action] = [
    .add,
    .remove,
    .promote,
    .demote,
    .leave,
  ]
}

extension PBgroup_member.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PBgroup_member.TypeEnum] = [
    .member,
    .admin,
  ]
}

#endif  // swift(>=4.2)

public struct PBgroup_stanza {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var action: PBgroup_stanza.Action = .set

  public var gid: String = String()

  public var name: String = String()

  public var avatarID: String = String()

  public var senderUid: Int64 = 0

  public var senderName: String = String()

  public var members: [PBgroup_member] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case set // = 0
    case get // = 1
    case create // = 2
    case delete // = 3
    case leave // = 4
    case changeAvatar // = 5
    case changeName // = 6
    case modifyAdmins // = 7
    case modifyMembers // = 8
    case autoPromoteAdmins // = 9
    case setName // = 10
    case UNRECOGNIZED(Int)

    public init() {
      self = .set
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .set
      case 1: self = .get
      case 2: self = .create
      case 3: self = .delete
      case 4: self = .leave
      case 5: self = .changeAvatar
      case 6: self = .changeName
      case 7: self = .modifyAdmins
      case 8: self = .modifyMembers
      case 9: self = .autoPromoteAdmins
      case 10: self = .setName
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .set: return 0
      case .get: return 1
      case .create: return 2
      case .delete: return 3
      case .leave: return 4
      case .changeAvatar: return 5
      case .changeName: return 6
      case .modifyAdmins: return 7
      case .modifyMembers: return 8
      case .autoPromoteAdmins: return 9
      case .setName: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension PBgroup_stanza.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PBgroup_stanza.Action] = [
    .set,
    .get,
    .create,
    .delete,
    .leave,
    .changeAvatar,
    .changeName,
    .modifyAdmins,
    .modifyMembers,
    .autoPromoteAdmins,
    .setName,
  ]
}

#endif  // swift(>=4.2)

public struct PBgroup_chat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gid: String = String()

  public var name: String = String()

  public var avatarID: String = String()

  public var senderUid: Int64 = 0

  public var senderName: String = String()

  public var timestamp: Int64 = 0

  public var payload: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct PBgroups_stanza {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var action: PBgroups_stanza.Action = .get

  public var groupStanzas: [PBgroup_stanza] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Action: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case get // = 0
    case UNRECOGNIZED(Int)

    public init() {
      self = .get
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .get
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .get: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension PBgroups_stanza.Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [PBgroups_stanza.Action] = [
    .get,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PBgroup_member: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "group_member"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .same(proto: "uid"),
    3: .same(proto: "type"),
    4: .same(proto: "name"),
    5: .standard(proto: "avatar_id"),
    6: .same(proto: "result"),
    7: .same(proto: "reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.action)
      case 2: try decoder.decodeSingularInt64Field(value: &self.uid)
      case 3: try decoder.decodeSingularEnumField(value: &self.type)
      case 4: try decoder.decodeSingularStringField(value: &self.name)
      case 5: try decoder.decodeSingularStringField(value: &self.avatarID)
      case 6: try decoder.decodeSingularStringField(value: &self.result)
      case 7: try decoder.decodeSingularStringField(value: &self.reason)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .add {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if self.uid != 0 {
      try visitor.visitSingularInt64Field(value: self.uid, fieldNumber: 2)
    }
    if self.type != .member {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.avatarID.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarID, fieldNumber: 5)
    }
    if !self.result.isEmpty {
      try visitor.visitSingularStringField(value: self.result, fieldNumber: 6)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBgroup_member, rhs: PBgroup_member) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.uid != rhs.uid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs.avatarID != rhs.avatarID {return false}
    if lhs.result != rhs.result {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBgroup_member.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "add"),
    1: .same(proto: "remove"),
    2: .same(proto: "promote"),
    3: .same(proto: "demote"),
    4: .same(proto: "leave"),
  ]
}

extension PBgroup_member.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "member"),
    1: .same(proto: "admin"),
  ]
}

extension PBgroup_stanza: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "group_stanza"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .same(proto: "gid"),
    3: .same(proto: "name"),
    4: .standard(proto: "avatar_id"),
    5: .standard(proto: "sender_uid"),
    6: .standard(proto: "sender_name"),
    7: .same(proto: "members"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.action)
      case 2: try decoder.decodeSingularStringField(value: &self.gid)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.avatarID)
      case 5: try decoder.decodeSingularInt64Field(value: &self.senderUid)
      case 6: try decoder.decodeSingularStringField(value: &self.senderName)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.members)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .set {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if !self.gid.isEmpty {
      try visitor.visitSingularStringField(value: self.gid, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.avatarID.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarID, fieldNumber: 4)
    }
    if self.senderUid != 0 {
      try visitor.visitSingularInt64Field(value: self.senderUid, fieldNumber: 5)
    }
    if !self.senderName.isEmpty {
      try visitor.visitSingularStringField(value: self.senderName, fieldNumber: 6)
    }
    if !self.members.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.members, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBgroup_stanza, rhs: PBgroup_stanza) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.gid != rhs.gid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.avatarID != rhs.avatarID {return false}
    if lhs.senderUid != rhs.senderUid {return false}
    if lhs.senderName != rhs.senderName {return false}
    if lhs.members != rhs.members {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBgroup_stanza.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "set"),
    1: .same(proto: "get"),
    2: .same(proto: "create"),
    3: .same(proto: "delete"),
    4: .same(proto: "leave"),
    5: .same(proto: "change_avatar"),
    6: .same(proto: "change_name"),
    7: .same(proto: "modify_admins"),
    8: .same(proto: "modify_members"),
    9: .same(proto: "auto_promote_admins"),
    10: .same(proto: "set_name"),
  ]
}

extension PBgroup_chat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "group_chat"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gid"),
    2: .same(proto: "name"),
    3: .standard(proto: "avatar_id"),
    4: .standard(proto: "sender_uid"),
    5: .standard(proto: "sender_name"),
    6: .same(proto: "timestamp"),
    7: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.gid)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.avatarID)
      case 4: try decoder.decodeSingularInt64Field(value: &self.senderUid)
      case 5: try decoder.decodeSingularStringField(value: &self.senderName)
      case 6: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 7: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gid.isEmpty {
      try visitor.visitSingularStringField(value: self.gid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.avatarID.isEmpty {
      try visitor.visitSingularStringField(value: self.avatarID, fieldNumber: 3)
    }
    if self.senderUid != 0 {
      try visitor.visitSingularInt64Field(value: self.senderUid, fieldNumber: 4)
    }
    if !self.senderName.isEmpty {
      try visitor.visitSingularStringField(value: self.senderName, fieldNumber: 5)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 6)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBgroup_chat, rhs: PBgroup_chat) -> Bool {
    if lhs.gid != rhs.gid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.avatarID != rhs.avatarID {return false}
    if lhs.senderUid != rhs.senderUid {return false}
    if lhs.senderName != rhs.senderName {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBgroups_stanza: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "groups_stanza"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .standard(proto: "group_stanzas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.action)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.groupStanzas)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.action != .get {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    if !self.groupStanzas.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupStanzas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PBgroups_stanza, rhs: PBgroups_stanza) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.groupStanzas != rhs.groupStanzas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBgroups_stanza.Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "get"),
  ]
}
